package client;

import java.awt.Frame;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Vector;

import javax.media.CaptureDeviceInfo;

import org.eclipse.swt.SWT;
import org.eclipse.swt.awt.SWT_AWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Tray;
import org.eclipse.swt.widgets.TrayItem;

import connection.DBConnSingleton;


/**
 * @author Caleb Shortt
 * @Description
 * This is the main client application for the SECAM SysControls Component.
 * This is a GUI prototype and does not contain all of the functionality of
 * the completed product. This is a proof of concept.
 * 
 */
public class ClientMain 
{
	// Main Container classes
	private Display display = null;
	private Shell shell = null;

	private final int WIDTH = 650;
	private final int HEIGHT = 700;
	
	// -----------------------------------------------------------------------------
	// Elements of Menu Bar
	private Menu menu = null;

	// Items of Main Menu Bar
	private MenuItem file = null;
	private MenuItem edit = null;
	private MenuItem view = null;
	private MenuItem tools = null;
	private MenuItem help = null;

	// Sub Menus
	private Menu file_menu = null;
	private Menu edit_menu = null;
	private Menu view_menu = null;
	private Menu tools_menu = null;
	private Menu help_menu = null;

	// File Sub Menu Items
	private MenuItem connect = null;
	private MenuItem exit = null;

	// Edit Sub Menu Items
	private MenuItem start = null;
	private MenuItem stop = null;
	private MenuItem options = null;

	// View Sub Menu Items
	private MenuItem zoom = null;
	private MenuItem resolution = null;

	// Tools Sub Menu Items
	private Menu SensorsMenu = null;
	private MenuItem Sensors = null;
	private MenuItem SensorsRefresh = null;
	private MenuItem capture = null;

	// Help Sub Menu Items
	private MenuItem about = null;
	private MenuItem usermanual = null;

	// End of Menu Bar Definitions
	// -----------------------------------------------------------------------------

	private Tray tray = null;
	private TrayItem trayItem = null;

	private Label status = null;
	private Label motion = null;
	private Button start_button = null;
	private Button stop_button = null;
	private Button close_button = null;

	// ------------------------------------------------------------------------------

	private Composite video = null;

	private Vector<CaptureDeviceInfo> videoDevices = null;
	private CaptureDeviceInfo currentDevice = null;
	
	private InputDeviceManager DeviceManager = null;
	private Control control = null;
	// TODO: delete
	//private MotionDetector mDetector = null;
	
	private ArrayList<MenuItem> SensorList;
	
	// ------------------------------------------------------------------------------
	
	private String settingsFile = "syscontrols.dat";
	private BufferedReader in = null;
	private BufferedWriter out = null;
	
	
	/**
	 * The Constructor of the SysControlMain class; This initializes the 
	 * class and its GUI and starts it.
	 */
	public ClientMain()
	{
		init();
		run();
	}

	
	/**
	 * This is the highest initialiser function in the SysControl.
	 * It calls all other initialiser functions and initialises all main 
	 * variables.
	 * @param none
	 * @return void
	 */
	private void init()
	{
		display = new Display();
		shell = new Shell(display);
		
		getSettingsFile();
		
		DeviceManager = new InputDeviceManager();
		videoDevices = DeviceManager.getVideoDevices();
		currentDevice = videoDevices.get(0);		// Set default video feed to first in list
		
		SensorList = new ArrayList<MenuItem>();

		FormLayout layout = new FormLayout();
		layout.marginWidth = 5;
		layout.marginHeight = 5;
		shell.setLayout(layout);

		tray = display.getSystemTray();
		initTray();
		initMenu();
		initBody();

		// Display.asyncExec(mDetector);
		addListeners();
	}

	
	/**
	 * Initialises the body of the GUI. This includes dealing with the 
	 * placement and initialisation of all GUI variables. 
	 * This function DOES NOT initialise listeners, however.
	 * @param none
	 * @return void
	 */
	public void initBody()
	{
		video = new Composite(shell, SWT.EMBEDDED);
		FormData vData = new FormData();
		vData.left = new FormAttachment(0, 0);
		vData.right = new FormAttachment(100, 0);
		vData.top = new FormAttachment(0, 0);
		vData.bottom = new FormAttachment(75, 0);
		video.setLayoutData(vData);

		Frame frame = SWT_AWT.new_Frame(video);
		control = new Control(currentDevice.getLocator(), frame);
		frame = control.getFrame();
		// TODO: Delete
		//mDetector = new MotionDetector(currentDevice.getLocator(), frame);
		//frame = mDetector.getFrame();
		// TODO: delete
		//mDetector.setInputDeviceManager(DeviceManager);

		status = new Label(shell, SWT.SINGLE | SWT.EMBEDDED);
		status.setSize(300, 20);
		status.setText("Not Activated");

		motion = new Label(shell, SWT.SINGLE | SWT.EMBEDDED);
		motion.setText("");

		FormData lData = new FormData();
		lData.top = new FormAttachment(video, 1);
		status.setLayoutData(lData);

		close_button = new Button(shell, SWT.PUSH);
		close_button.setText("Exit");
		FormData closeData = new FormData();
		closeData.bottom = new FormAttachment(100, 0);
		closeData.right = new FormAttachment(100, -5);
		close_button.setLayoutData(closeData);

		stop_button = new Button(shell, SWT.PUSH);
		stop_button.setText("Deactivate");
		FormData stopData = new FormData();
		stopData.bottom = new FormAttachment(100, 0);
		stopData.right = new FormAttachment(close_button, -5);
		stop_button.setLayoutData(stopData);

		start_button = new Button(shell, SWT.PUSH);
		start_button.setText("Activate");
		FormData startData = new FormData();
		startData.bottom = new FormAttachment(100, 0);
		startData.right = new FormAttachment(stop_button, -5);
		start_button.setLayoutData(startData);
	}
	
	
	/**
	 * This function reinitializes the GUI of the system. 
	 * This is used when changing video sources.
	 */
	private void reinitialize()
	{
		if(SystemState.Activated || SystemState.Recording) {
			// TODO: Delete
			//mDetector.cleanup();
			control.cleanup()
		}
		initBody();
	}

	
	/**
	 * Open the settings file and update the cursor positions for the database.
	 */
	private void getSettingsFile()
	{
		try {
			in = new BufferedReader(new FileReader(settingsFile));
			
			String line;
			while((line = in.readLine()) != null)
			{
				if(line.startsWith("AUDIT="))
				{
					int aCursor = Integer.parseInt(line.replace("AUDIT=", ""));
					DBConnSingleton.getInstance().setAuditCursor(aCursor);
				}
				if(line.startsWith("STREAM="))
				{
					int sCursor = Integer.parseInt(line.replace("STREAM=", ""));
					DBConnSingleton.getInstance().setStreamCursor(sCursor);
				}
			}
		}
		catch(Exception e)
		{
			System.err.println("Init was unable to load settings: " + settingsFile + " missing.");
		}
		finally
		{
			try
			{
				in.close();
			}
			catch (Exception ex) {}
		}
	}
	
	
	/**
	 * Saves the database cursors to the settings file.
	 */
	private void setSettingsFile()
	{
		try {
			out = new BufferedWriter(new FileWriter(settingsFile, false));
			
			out.write("AUDIT=" + DBConnSingleton.getInstance().getAuditCursor());
			out.newLine();
			out.write("STREAM=" + DBConnSingleton.getInstance().getStreamCursor());
		}
		catch (Exception e)
		{
			System.err.println("An error occurred while trying to save syscontrol settings.");
		}
		finally
		{
			try {
				out.close();
			} catch (Exception ex) {}
		}
	}
	
	
	/**
	 * This function initialises the tray icon for the system. This
	 * function creates the icon, sets it, and adds a listener to it.
	 * @param none
	 * @return void
	 */
	private void initTray()
	{
		trayItem = new TrayItem(tray, 0);
		Image img = new Image(display, "green_icon.gif");
		trayItem.setToolTipText("SysControls is not activated.");
		trayItem.setImage(img);

		addTrayListener();
	}

	
	/**
	 * This function adds a listener to the tray icon that is created 
	 * in initTray(). This warrants it's own function as it deals 
	 * specifically with the tray icon and its behaviour.
	 * @param none
	 * @return void
	 */
	private void addTrayListener()
	{
		trayItem.addListener(SWT.MenuDetect, new Listener()
		{
			public void handleEvent(Event event)
			{
				Shell s = new Shell(event.display);
				Menu m = new Menu(s, SWT.POP_UP);
				MenuItem activate = new MenuItem(m, SWT.NONE);
				activate.setText("Activate System");
				MenuItem deactivate = new MenuItem(m, SWT.NONE);
				deactivate.setText("Deactivate System");
				MenuItem exitsys = new MenuItem(m, SWT.NONE);
				exitsys.setText("Exit");

				exitsys.addListener(SWT.Selection, new Listener()
				{
					public void handleEvent(Event event)
					{
						try {
							if(SystemState.Activated || SystemState.Recording)
								mDetector.stopBroadcast();
						}
						catch (Exception e)
						{
							// Nop
						}
						setSettingsFile();
						System.exit(0);
					}
				});

				activate.addListener(SWT.Selection, new Listener()
				{
					public void handleEvent(Event event)
					{
						try {
							if(SystemState.LoggedIn)
							{
								SystemState.Activated = true;
								
								StateChangeEvent sce = new StateChangeEvent(this);
								SystemStateListener.fireStateEvent(sce);
								
								trayItem.setToolTipText("SysControls is activated!");
								trayItem.setImage(new Image(display, "red_icon.gif"));
								shell.setMinimized(true);
								status.setText("Activated!");
							}
							else
							{
								status.setText("Must be logged in to activate system.");
							}
						}
						catch(Exception e)
						{
							status.setText("Error while activating: " + e.getMessage());
						}
					}
				});

				deactivate.addListener(SWT.Selection, new Listener()
				{
					public void handleEvent(Event event)
					{
						try {
							if(SystemState.LoggedIn)
							{
								mDetector.stopBroadcast();
								SystemState.Activated = false;
								
								StateChangeEvent sce = new StateChangeEvent(this);
								SystemStateListener.fireStateEvent(sce);
								
								trayItem.setToolTipText("SysControls is deactivated.");
								trayItem.setImage(new Image(display, "green_icon.gif"));
								status.setText("Deactivated");
								shell.setMaximized(true);
								shell.setSize(WIDTH, HEIGHT);
							}
							else
							{
								status.setText("Must be logged in to deactivate software.");
							}
						}
						catch (Exception e)
						{
							status.setText("Error while deactivating: " + e.getMessage());
							shell.setMaximized(true);
							shell.setSize(WIDTH, HEIGHT);
						}
					}
				});

				m.setVisible(true);
			}
		});
	}

	
	/**
	 * This function initializes the menu bar that runs across the top 
	 * of the GUI. It creates all of the main menu items, then populates 
	 * them with the sub-menu items. NO listeners are added in this function.
	 * @param none
	 * @return void
	 */
	private void initMenu()
	{
		menu = new Menu(shell, SWT.BAR);
		shell.setMenuBar(menu);

		// File Menu
		file = new MenuItem(menu, SWT.CASCADE);
		file.setText("&File");

		file_menu = new Menu(shell, SWT.DROP_DOWN);
		file.setMenu(file_menu);

		connect = new MenuItem(file_menu, SWT.PUSH);
		connect.setText("Connect");
		exit = new MenuItem(file_menu, SWT.DROP_DOWN);
		exit.setText("Exit");

		// Edit Menu
		edit = new MenuItem(menu, SWT.CASCADE);
		edit.setText("&Edit");

		edit_menu = new Menu(shell, SWT.DROP_DOWN);
		edit.setMenu(edit_menu);

		start = new MenuItem(edit_menu, SWT.PUSH);
		start.setText("Activate System");
		stop = new MenuItem(edit_menu, SWT.PUSH);
		stop.setText("Deactivate System");
		options = new MenuItem(edit_menu, SWT.PUSH);
		options.setText("System Options");

		// View Menu
		view = new MenuItem(menu, SWT.CASCADE);
		view.setText("View");

		view_menu = new Menu(shell, SWT.DROP_DOWN);
		view.setMenu(view_menu);

		zoom = new MenuItem(view_menu, SWT.PUSH);
		zoom.setText("Zoom");
		resolution = new MenuItem(view_menu, SWT.PUSH);
		resolution.setText("Resolution");

		// Tools Menu
		tools = new MenuItem(menu, SWT.CASCADE);
		tools.setText("Tools");

		tools_menu = new Menu(shell, SWT.DROP_DOWN);
		tools.setMenu(tools_menu);
		
		capture = new MenuItem(tools_menu, SWT.PUSH);
		capture.setText("Capture Image");
		
		new MenuItem(tools_menu, SWT.SEPARATOR);
		
		SensorsRefresh = new MenuItem(tools_menu, SWT.PUSH);
		SensorsRefresh.setText("Search For Sensors");
		Sensors = new MenuItem(tools_menu, SWT.CASCADE);
		Sensors.setText("Sensors");
		SensorsMenu = new Menu(shell, SWT.DROP_DOWN);
		Sensors.setMenu(SensorsMenu);
		

		// Help Menu
		help = new MenuItem(menu, SWT.CASCADE);
		help.setText("Help");

		help_menu = new Menu(shell, SWT.DROP_DOWN);
		help.setMenu(help_menu);

		about = new MenuItem(help_menu, SWT.PUSH);
		about.setText("About");
		usermanual = new MenuItem(help_menu, SWT.PUSH);
		usermanual.setText("User Manual");
	}
	
	
	/**
	 * This function adds listeners to all of the selectable items in the 
	 * GUI.
	 * @param none
	 * @return void
	 */
	private void addListeners()
	{
		connect.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				try
				{
					Display.getDefault().syncExec( new Runnable() {  public void run() { new ConnectPane(display); }});
				} 
				catch (Exception err)
				{
					System.err.println(err.getMessage());
					status.setText("Error while connecting: " + err.getMessage());
				}
			}
		});
		exit.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				try {
					if(SystemState.Activated || SystemState.Recording)
						mDetector.cleanup();
				}
				catch(Exception err)
				{
					// Nop
				}
				setSettingsFile();
				System.exit(0);
			}
		});
		start.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				try {
					if(SystemState.LoggedIn)
					{
						StateChangeEvent sce = new StateChangeEvent(this);
						SystemStateListener.fireStateEvent(sce);
						
						trayItem.setToolTipText("SysControls is activated!");
						trayItem.setImage(new Image(display, "red_icon.gif"));
						status.setText("Activated!");
						shell.setMinimized(true);
						SystemState.Activated = true;
					}
					else
					{
						status.setText("Must be logged in to activate system.");
					}
				} 
				catch (Exception err)
				{
					status.setText("Error while starting: " + err.getMessage());
				}
			}
		});
		stop.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				try {
					if(SystemState.LoggedIn)
					{
						mDetector.stopBroadcast();
						
						StateChangeEvent sce = new StateChangeEvent(this);
						SystemStateListener.fireStateEvent(sce);
						
						trayItem.setToolTipText("SysControls is deactivated.");
						trayItem.setImage(new Image(display, "green_icon.gif"));
						status.setText("Deactivated");
						
						SystemState.Activated = false;
					}
					else
					{
						status.setText("Must be logged in to deactivate software.");
					}
				}
				catch (Exception err)
				{
					status.setText("Error while stopping: " + err.getMessage());
				}
			}
		});
		options.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				// Handle button selection
			}
		});
		zoom.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				// Handle button selection
			}
		});
		resolution.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				// Handle button selection
			}
		});
		SensorsRefresh.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				// Handle button selection
				
				// On click, search for all sensors (audio and video connected to computer)
				// List sensors for user to select - only allow video sensors to be selected
				// Once selected, set the new currentDevice variable and reinitialize the body (using initBody)
				
				DeviceManager.refreshDeviceList();
				videoDevices = DeviceManager.getVideoDevices();
				
				// Clear Sensor List and menu (reinit menu)
				SensorList.clear();
				SensorsMenu = new Menu(shell, SWT.DROP_DOWN);
				Sensors.setMenu(SensorsMenu);
				
				// Populate menu with currently connected sensors (visual)
				for(int i=0; i<videoDevices.size(); i++)
				{
					// Create a menu item for the sensor
					MenuItem temp = new MenuItem(SensorsMenu, SWT.PUSH);
					temp.setText(videoDevices.get(i).getName());
					
					// Add the event handler for the menu item
					temp.addListener(SWT.Selection, new Listener()
					{
						public void handleEvent(Event e)
						{
							// Set the source of the data source to the newly selected sensor
							MenuItem item = (MenuItem)e.widget;
							String deviceName = item.getText();
							
							boolean found = false;
							for(int i=0; i<videoDevices.size(); i++)
							{
								if(videoDevices.get(i).getName().contains(deviceName))
								{
									// If the selected device is already playing, don't reset
									if(!currentDevice.getName().contains(deviceName))
									{
										currentDevice = videoDevices.get(i);
										found = true;
										break;
									}
								}
							}
							if(found)
							{
								try {
									reinitialize();
								} catch(Exception ex)
								{
									// nop
								}
							}
						}
					});
					
					SensorList.add(temp);
				}
			}
		});
		capture.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				// Handle button selection
			}
		});
		about.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				// Handle button selection
			}
		});
		usermanual.addListener(SWT.Selection, new Listener()
		{
			public void handleEvent(Event e)
			{
				// Handle button selection
			}
		});
		start_button.addSelectionListener(new SelectionListener()
		{
			public void widgetDefaultSelected(SelectionEvent arg0)
			{
			}

			public void widgetSelected(SelectionEvent arg0)
			{
				try {
					if(SystemState.LoggedIn)
					{
						StateChangeEvent sce = new StateChangeEvent(this);
						SystemStateListener.fireStateEvent(sce);
						
						trayItem.setToolTipText("SysControls is activated!");
						trayItem.setImage(new Image(display, "red_icon.gif"));
						status.setText("Activated!");
						shell.setMinimized(true);
						
						SystemState.Activated = true;
					}
					else
					{
						status.setText("Must be logged in to activate system.");
					}
				}
				catch (Exception e)
				{
					status.setText("Could not start system: " + e.getMessage());
				}
			}

		});
		stop_button.addSelectionListener(new SelectionListener()
		{
			public void widgetDefaultSelected(SelectionEvent arg0)
			{
			}

			public void widgetSelected(SelectionEvent arg0)
			{
				try {
					if(SystemState.LoggedIn)
					{
						mDetector.stopBroadcast();
						
						StateChangeEvent sce = new StateChangeEvent(this);
						SystemStateListener.fireStateEvent(sce);
						
						trayItem.setToolTipText("SysControls is not activated.");
						trayItem.setImage(new Image(display, "green_icon.gif"));
						status.setText("Not Activated");
						
						SystemState.Activated = false;
					}
					else
					{
						status.setText("Must be logged in to deactivate software.");
					}
				}
				catch (Exception e)
				{
					status.setText("Error while stopping: " + e.getMessage());
				}
			}
		});
		close_button.addSelectionListener(new SelectionListener()
		{
			public void widgetDefaultSelected(SelectionEvent arg0)
			{
			}

			public void widgetSelected(SelectionEvent arg0)
			{
				try {
					mDetector.stopBroadcast();
					SystemState.Activated = false;
				}
				catch (Exception e)
				{
					// Nop
				}
				finally {
					setSettingsFile();
					System.exit(0);
				}
			}
		});
	}

	
	/**
	 * This function runs the GUI. While the GUI is open, this function 
	 * will maintain it and handle cleanup when the GUI is closed.
	 * @param none
	 * @return void
	 */
	private void run()
	{
		shell.setSize(WIDTH, HEIGHT);
		shell.setMinimumSize(WIDTH, HEIGHT);
		shell.setText("SECAM: SysControls Client Application");
		shell.open();
		while (!shell.isDisposed())
		{
			if (!display.readAndDispatch())
			{
				display.sleep();
			}
		}
		try {
			mDetector.cleanup();
		} catch(Exception e) {}
		setSettingsFile();
		ConnSingleton.getInstance().disconnect();
		display.dispose();
		System.exit(0);
	}

	
	/**
	 * The main function of the class; all this function does is initialise 
	 * an instance of the SysControlMain class. The constructor will handle 
	 * the rest.
	 * @param args
	 * @return void
	 */
	public static void main(String[] args)
	{
		new SysControlMain();
	}
}
