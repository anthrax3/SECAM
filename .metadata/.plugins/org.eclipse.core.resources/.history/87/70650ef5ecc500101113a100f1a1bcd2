package connection;

import java.io.IOException;
import java.net.Socket;

/**
 * Client-side program: Handles all of the communications from client to server
 * @author Caleb Shortt
 */
public class ConnectionController {
	
	private int port = 4444;
	private String server = "";
	private Socket clientSocket = null;
	
	
	
	private ConnectionController() {
		// Attempt to connect to the server x times
		// ping the server at regular intervals?
		//	A thread will do that best: some thread examples in other code (timers, etc)
	}
	
	
	private static ConnectionController controller = null;
	public static ConnectionController getInstance() {
		if (controller == null)
			controller = new ConnectionController();
		return controller;
	}
	
	
	/**
	 * Attempts to connect to the server from the given parameters 'server' and 'port'
	 * @return success
	 */
	private boolean connect() {
		try {
			clientSocket = new Socket(server, port);
		} catch (IOException ioe) {
			return false;
		}
		return true;
	}
	
	
	// TODO: Finish this function
	public boolean validateUser(String username, String password, String ip) {
		// - The username and password will be sent to this function in plain text form
		// - The password will have to be run through a md5 hash before being sent to the server
		// - The ip address will be used to link the user and the computer where the client is installed
		// - This function will also "register" the client with the server
		//		- The client will be given a unique id upon successful validation
		//		- This id will be required upon for stream creation and ending streams
		
		return true;
	}
	
	
	// TODO: Finish this function
	public boolean createStream() {
		// - Not sure what variables will be passed to this function yet.
		// - This function will tell the server to register a stream with the unique id given to the client
		// 		- It will also begin the streaming process (Probably done in a separate thread)
		
		return true;
	}
	
	
	// TODO: Finish this function
	public boolean endStream() {
		// - This function will contact the server and tell it that the streaming has stopped
		// - This will provide a log trace for all ending of streams
		// - This function will help prevent unauthorized users from stopping the streaming
		
		return true;
	}
}
